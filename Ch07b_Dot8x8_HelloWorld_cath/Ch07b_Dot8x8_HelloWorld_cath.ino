
#define H {\
    {1,1,0,0,0,1,1,0},\
    {1,1,0,0,0,1,1,0},\
    {1,1,0,0,0,1,1,0},\
    {1,1,1,1,1,1,1,0},\
    {1,1,1,1,1,1,1,0},\
    {1,1,0,0,0,1,1,0},\
    {1,1,0,0,0,1,1,0},\
    {1,1,0,0,0,1,1,0},\
  }

#define E  {\
    {1,1,1,1,1,1,1,0},\
    {0,1,1,0,0,0,1,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,1,1,1,1,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,1,0},\
    {1,1,1,1,1,1,1,0},\
  }

#define L {\
    {1,1,1,1,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {0,1,1,0,0,0,1,0},\
    {0,1,1,0,0,1,1,0},\
    {1,1,1,1,1,1,1,0},\
  }

#define n0 {\
    {0,1,1,1,1,1,1,0},\
    {1,1,1,0,0,1,1,1},\
    {1,1,0,0,0,0,1,1},\
    {1,1,0,0,0,0,1,1},\
    {1,1,0,0,0,0,1,1},\
    {1,1,0,0,0,0,1,1},\
    {1,1,1,0,0,1,1,1},\
    {0,1,1,1,1,1,1,0},\
  }

#define W {\
    {1,1,1,0,0,0,1,0},\
    {1,1,0,0,0,0,1,0},\
    {1,1,0,0,0,0,1,0},\
    {1,1,0,0,1,0,1,0},\
    {1,1,0,1,1,0,1,0},\
    {1,1,0,1,1,1,1,0},\
    {1,1,1,1,0,1,1,0},\
    {1,1,0,0,0,1,1,0},\
  }

#define R {\
    {1,1,1,1,1,1,0,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,1,1,0,0},\
    {0,1,1,1,1,1,0,0},\
    {0,1,1,0,1,1,0,0},\
    {0,1,1,0,0,1,1,0},\
    {1,1,1,0,0,1,1,0},\
  }

#define D {\
    {1,1,1,1,1,0,0,0},\
    {0,1,1,0,1,1,0,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,0,1,1,0},\
    {0,1,1,0,1,1,0,0},\
    {1,1,1,1,1,0,0,0},\
  }

#define SPACE {\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
  }

#define ex {\
    {0,0,1,1,0,1,1,0},\
    {0,0,1,1,0,1,1,0},\
    {0,0,1,1,0,1,1,0},\
    {0,1,1,0,1,1,0,0},\
    {0,1,1,0,1,1,0,0},\
    {0,0,0,0,0,0,0,0},\
    {1,1,0,1,1,0,0,0},\
    {1,1,0,1,1,0,0,0},\
  }     // exclamation


#define pk {\
    {0,0,1,1,1,1,0,0},\
    {0,1,0,0,0,0,1,0},\
    {1,0,0,1,1,0,0,1},\
    {1,0,1,0,0,1,0,1},\
    {1,0,1,0,0,1,0,1},\
    {1,1,1,1,1,1,1,1},\
    {0,1,1,1,1,1,1,0},\
    {0,0,1,1,1,1,0,0},\
  }     // Pokemon ball

#define wv {\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,1,1,0,0,0,0,0},\
    {1,1,1,1,0,0,1,0},\
    {1,0,0,1,1,1,1,0},\
    {0,0,0,0,1,1,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
  }     // Wave

#define ds {\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,1,1,1,1,0,0},\
    {0,0,1,1,1,1,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
    {0,0,0,0,0,0,0,0},\
  }     // dash

#include <FrequencyTimer2.h>

byte col = 0;
byte leds[8][8];

int pins[17] = { -1,  6, 7, 8, 9, 10,  11,  12, 13,  14, 15, 16, 17, 5, 4, 3, 2 };

int cols[8] = {pins[13], pins[3], pins[4], pins[10], pins[06], pins[11], pins[15], pins[16]};
int rows[8] = {pins[9], pins[14], pins[8], pins[12], pins[1], pins[7], pins[2], pins[5]};

const int numPatterns = 16;

byte patterns[numPatterns][8][8] = {
  pk, SPACE, H, E, L, L, n0, SPACE, W, n0, R, L, D, wv, ex, SPACE
};

int pattern = 0;

void setup() {
  for (int i = 1; i <= 16; i++) {
    pinMode(pins[i], OUTPUT);
  }

  for (int i = 1; i <= 8; i++) {
    digitalWrite(cols[i - 1], LOW);
  }

  for (int i = 1; i <= 8; i++) {
    digitalWrite(rows[i - 1], LOW);
  }
  
  clearLeds();

  FrequencyTimer2::disable();
  FrequencyTimer2::setPeriod(2000);
  FrequencyTimer2::setOnOverflow(display);

  setPattern(pattern);
}


void loop() {
  pattern = ++pattern % numPatterns;
  slidePattern(pattern, 100);
}

void clearLeds() {
  // Clear display array
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      leds[i][j] = 0;
    }
  }
}

void setPattern(int pattern) {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      leds[i][j] = patterns[pattern][i][j];
    }
  }
}

void slidePattern(int pattern, int del) {
  for (int l = 0; l < 8; l++) {
    for (int i = 0; i < 7; i++) {
      for (int j = 0; j < 8; j++) {
        leds[j][i] = leds[j][i + 1];
      }
    }

    for (int j = 0; j < 8; j++) {
      leds[j][7] = patterns[pattern][j][0 + l];
    }
    delay(del);
  }
}

void display() {
  digitalWrite(cols[col], LOW);
  col++;
  if (col == 8) {
    col = 0;
  }

  for (int row = 0; row < 8; row++) {
    if (leds[col][7 - row] == 1) {
      digitalWrite(rows[row], LOW);
    }
    else {
      digitalWrite(rows[row], HIGH);
    }
  }
  digitalWrite(cols[col], HIGH);
}
